module Fastlane
  module Actions
    class IosMergeStringsFilesAction < Action
      def self.run(params)
        destination = params[:destination]
        # Include the destination as the first of the files (without key prefixes) to be included in the merged result
        all_paths_list = { destination => nil }.merge(params[:paths_to_merge])

        UI.message "Merging strings files #{all_paths_list.inspect}"

        File.write(destination, '') unless File.exist?(destination) # Create empty destination file if it does not exist yet
        duplicates = Fastlane::Helper::Ios::L10nHelper.merge_strings(paths: all_paths_list, output_path: params[:destination])
        duplicates.each do |dup_key|
          UI.important "Duplicate key found while merging the `.strings` files: `#{dup_key}`"
        end
        UI.important 'Tip: To avoid those key conflicts, you might want to consider providing different prefixes in the `Hash` you used for the `paths:` parameter.' unless duplicates.empty?
        duplicates
      end

      #####################################################
      # @!group Documentation
      #####################################################

      def self.description
        'Merge multiple `.strings` files into one'
      end

      def self.details
        <<~DETAILS
          Merge multiple `.strings` files into another one.

          Especially useful to prepare a single `.strings` file merging string files like `InfoPlist.strings` — whose
          content are typically manually maintained by developers — within the main `Localizable.strings` file — which
          would have typically been previously generated from the codebase via `ios_generate_strings_file_from_code`.

          The action only supports merging files which are in the OpenStep (`"key" = "value";`) text format (which is
          the most common format for `.strings` files, and the one generated by `genstrings`), but can handle the case
          of different files using different encodings (UTF8 vs UTF16) and is able to detect and report duplicates.
          It does not handle `.strings` files in XML or binary-plist formats (which are valid but more rare)
        DETAILS
      end

      def self.available_options
        [
          FastlaneCore::ConfigItem.new(
            key: :paths_to_merge,
            env_name: 'FL_IOS_MERGE_STRINGS_FILES_PATHS_TO_MERGE',
            description: 'A hash of the paths of all the `.strings` files to merge into the `destination`, with the prefix to be used for their keys as associated value',
            type: Hash,
            optional: false
          ),
          FastlaneCore::ConfigItem.new(
            key: :destination,
            env_name: 'FL_IOS_MERGE_STRINGS_FILES_DESTINATION',
            description: 'The path of the `.strings` file to merge the other ones into',
            type: String,
            optional: false
          ),
        ]
      end

      def self.return_type
        :array_of_strings
      end

      def self.return_value
        'The list of duplicate keys (after prefix has been added to each) found while merging the various `.strings` files'
      end

      def self.authors
        ['Automattic']
      end

      def self.is_supported?(platform)
        [:ios, :mac].include? platform
      end
    end
  end
end
